# encoding: utf-8
module Holidays
  # This file is generated by the Ruby Holidays gem.
  #
  # Definitions loaded: data/raybeam.yaml
  #
  # To use the definitions in this file, load it right after you load the 
  # Holiday gem:
  #
  #   require 'holidays'
  #   require 'holidays/raybeam'
  #
  # All the definitions are available at https://github.com/alexdunae/holidays
  module RAYBEAM # :nodoc:
    def self.defined_regions
      [:raybeam]
    end

    def self.holidays_by_month
      {
      0 => [{:function => lambda { |year| Holidays.easter(year)-2 }, :function_id => "easter(year)-2", :type => :informal, :name => "Good Friday", :regions => [:raybeam]},
            {:function => lambda { |year| Holidays.easter(year) }, :function_id => "easter(year)", :type => :informal, :name => "Easter Sunday", :regions => [:raybeam]}],
      1 => [{:mday => 1, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "New Year's Day", :regions => [:raybeam]},
            {:wday => 1, :week => 3, :name => "Martin Luther King, Jr. Day", :regions => [:raybeam]},
            {:function => lambda { |year| Holidays.us_inauguration_day(year) }, :function_id => "us_inauguration_day(year)", :type => :informal, :name => "Inauguration Day", :regions => [:raybeam]}],
      2 => [{:wday => 1, :type => :informal, :week => 3, :name => "Presidents' Day", :regions => [:raybeam]},
            {:mday => 2, :type => :informal, :name => "Groundhog Day", :regions => [:raybeam]},
            {:mday => 14, :type => :informal, :name => "Valentine's Day", :regions => [:raybeam]}],
      3 => [{:mday => 17, :type => :informal, :name => "St. Patrick's Day", :regions => [:raybeam]}],
      4 => [{:mday => 1, :type => :informal, :name => "April Fool's Day", :regions => [:raybeam]},
            {:mday => 22, :type => :informal, :name => "Earth Day", :regions => [:raybeam]}],
      6 => [{:wday => 0, :week => 3, :type => :informal, :name => "Father's Day", :regions => [:raybeam]}],            
      5 => [{:wday => 1, :week => -1, :name => "Memorial Day", :regions => [:raybeam]},
            {:wday => 0, :week => 2, :type => :informal, :name => "Mother's Day", :regions => [:raybeam]},
            {:wday => 6, :week => 3, :type => :informal, :name => "Armed Forces Day", :regions => [:raybeam]}],
      7 => [{:mday => 4, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Independence Day", :regions => [:raybeam]}],
      9 => [{:wday => 1, :week => 1, :name => "Labor Day", :regions => [:raybeam]}],
      10 => [{:wday => 1, :type => :informal, :week => 2, :name => "Columbus Day", :regions => [:raybeam]},
            {:mday => 31, :type => :informal, :name => "Halloween", :regions => [:raybeam]}],
      11 => [{:mday => 11, :type => :informal, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Veterans Day", :regions => [:raybeam]},
            {:wday => 4, :week => 4, :name => "Thanksgiving", :regions => [:raybeam]},
            {:wday => 5, :week => 4, :name => "Black Friday", :regions => [:raybeam]}],
      12 => [{:mday => 25, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Christmas Day", :regions => [:raybeam]}]
      }
    end
  end

# January 20, every fourth year, following Presidential election
def self.us_inauguration_day(year)
  year % 4 == 1 ? 20 : nil
end



end

Holidays.merge_defs(Holidays::RAYBEAM.defined_regions, Holidays::RAYBEAM.holidays_by_month)
